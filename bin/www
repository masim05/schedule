#!/usr/bin/env node

var path = require('path');
var chokidar = require('chokidar');

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('schedule:server');
var http = require('http');
var controllers = {
  refreshActs: require('../controllers/refreshActs'),
  createAct: require('../controllers/createAct'),
  finishAct: require('../controllers/finishAct'),
  deleteAct: require('../controllers/deleteAct')
};
var ACTS_FILE = path.join(__dirname, '../storage/acts.json');
try {
  var stat = fs.statSync(ACTS_FILE);
}
catch (error) {
  fs.writeFileSync(ACTS_FILE, '[]');
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Websocket server.
 */

var io = require('socket.io')(server);

var watcher = chokidar.watch(ACTS_FILE);
watcher.on('change', function () {
  controllers.refreshActs(ACTS_FILE, io)();
});

io.on('connection', function (socket) {
  console.log('Client connected.');

  socket.on('error', function (error) {
    console.log('Error on websocket', error.stack);
  });
  socket.on('disconnect', function () {
    console.log('Client disconnected.');
  });

  socket.on('createAct', controllers.createAct(ACTS_FILE, socket));
  socket.on('finishAct', controllers.finishAct(ACTS_FILE, socket));
  socket.on('deleteAct', controllers.deleteAct(ACTS_FILE, socket));
  socket.on('reqRefreshActs', controllers.refreshActs(ACTS_FILE, socket));

  controllers.refreshActs(ACTS_FILE, socket)();
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
